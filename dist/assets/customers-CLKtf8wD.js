import{l as y,r as n,m as l}from"./main-SXArKNhp.js";const p=y("customers",()=>{const s=n([]),r=n(!1),a=n(null);async function c(){try{r.value=!0,a.value=null;const t=await l.customers.list();s.value=t}catch(t){throw a.value=t instanceof Error?t.message:"Failed to fetch customers",t}finally{r.value=!1}}async function i(t){try{r.value=!0,a.value=null;const e=s.value.find(o=>o.id===t);return e||await l.customers.get(t)}catch(e){throw a.value=e instanceof Error?e.message:"Failed to fetch customer",e}finally{r.value=!1}}async function f(t){try{r.value=!0,a.value=null;const e=await l.customers.create(t);return s.value.push(e),e}catch(e){throw a.value=e instanceof Error?e.message:"Failed to create customer",e}finally{r.value=!1}}async function m(t,e){try{r.value=!0,a.value=null;const u=await l.customers.update(t,e),o=s.value.findIndex(d=>d.id===t);return o!==-1&&(s.value[o]=u),u}catch(u){throw a.value=u instanceof Error?u.message:"Failed to update customer",u}finally{r.value=!1}}async function v(t){try{r.value=!0,a.value=null,await l.customers.delete(t),s.value=s.value.filter(e=>e.id!==t)}catch(e){throw a.value=e instanceof Error?e.message:"Failed to delete customer",e}finally{r.value=!1}}return{customers:s,loading:r,error:a,fetchCustomers:c,getCustomer:i,createCustomer:f,updateCustomer:m,deleteCustomer:v}});export{p as u};
